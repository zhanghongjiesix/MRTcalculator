import numpy as np
from scipy.interpolate import interp2d

x_lims = np.arange(0, 190, 10)           # 方位角
y_lims = np.arange(90, -10, -10)         # 天顶角

Z_siting = [
    [0.291, 0.291, 0.288, 0.292, 0.292, 0.287, 0.276, 0.260, 0.237, 0.201, 0.236, 0.261, 0.276, 0.287, 0.293, 0.293,
     0.289, 0.290, 0.291],
    [0.297, 0.297, 0.298, 0.300, 0.300, 0.297, 0.289, 0.276, 0.250, 0.226, 0.241, 0.251, 0.264, 0.275, 0.281, 0.282,
     0.278, 0.278, 0.283],
    [0.298, 0.299, 0.301, 0.302, 0.302, 0.300, 0.294, 0.281, 0.256, 0.241, 0.248, 0.249, 0.254, 0.261, 0.265, 0.266,
     0.262, 0.262, 0.270],
    [0.293, 0.294, 0.296, 0.298, 0.297, 0.295, 0.289, 0.277, 0.255, 0.248, 0.247, 0.244, 0.246, 0.248, 0.246, 0.247,
     0.242, 0.243, 0.249],
    [0.280, 0.281, 0.283, 0.285, 0.284, 0.282, 0.277, 0.264, 0.248, 0.242, 0.239, 0.234, 0.231, 0.230, 0.224, 0.223,
     0.218, 0.222, 0.223],
    [0.261, 0.262, 0.263, 0.264, 0.263, 0.261, 0.257, 0.248, 0.236, 0.227, 0.221, 0.215, 0.211, 0.204, 0.196, 0.195,
     0.192, 0.191, 0.194],
    [0.235, 0.236, 0.238, 0.239, 0.238, 0.236, 0.231, 0.226, 0.219, 0.214, 0.209, 0.203, 0.196, 0.187, 0.176, 0.170,
     0.167, 0.164, 0.166],
    [0.207, 0.208, 0.209, 0.211, 0.210, 0.209, 0.206, 0.202, 0.196, 0.192, 0.188, 0.184, 0.176, 0.165, 0.157, 0.152,
     0.154, 0.153, 0.150],
    [0.177, 0.178, 0.179, 0.180, 0.181, 0.180, 0.178, 0.176, 0.172, 0.168, 0.164, 0.160, 0.156, 0.153, 0.150, 0.147,
     0.145, 0.143, 0.140],
    [0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147,
     0.147, 0.147, 0.147]]

Z_standing = [
    [0.329, 0.330, 0.332, 0.332, 0.323, 0.309, 0.295, 0.273, 0.234, 0.193, 0.234, 0.273, 0.295, 0.309, 0.323, 0.332,
     0.332, 0.331, 0.329],
    [0.328, 0.329, 0.331, 0.331, 0.323, 0.309, 0.295, 0.272, 0.235, 0.203, 0.233, 0.269, 0.288, 0.301, 0.316, 0.326,
     0.327, 0.325, 0.324],
    [0.318, 0.319, 0.321, 0.321, 0.315, 0.302, 0.288, 0.264, 0.228, 0.203, 0.226, 0.258, 0.276, 0.288, 0.302, 0.313,
     0.314, 0.313, 0.312],
    [0.300, 0.301, 0.302, 0.302, 0.298, 0.286, 0.272, 0.249, 0.216, 0.198, 0.215, 0.241, 0.258, 0.267, 0.281, 0.292,
     0.294, 0.294, 0.293],
    [0.274, 0.275, 0.275, 0.275, 0.272, 0.262, 0.248, 0.227, 0.197, 0.186, 0.198, 0.219, 0.234, 0.242, 0.253, 0.263,
     0.267, 0.267, 0.266],
    [0.241, 0.241, 0.241, 0.241, 0.238, 0.230, 0.218, 0.198, 0.175, 0.168, 0.176, 0.192, 0.204, 0.211, 0.219, 0.228,
     0.233, 0.234, 0.234],
    [0.202, 0.202, 0.202, 0.201, 0.199, 0.193, 0.183, 0.165, 0.150, 0.143, 0.147, 0.158, 0.168, 0.174, 0.181, 0.189,
     0.195, 0.197, 0.198],
    [0.159, 0.159, 0.159, 0.159, 0.158, 0.153, 0.145, 0.135, 0.126, 0.120, 0.118, 0.122, 0.128, 0.134, 0.140, 0.147,
     0.152, 0.156, 0.157],
    [0.118, 0.118, 0.118, 0.117, 0.116, 0.113, 0.110, 0.105, 0.100, 0.096, 0.093, 0.093, 0.095, 0.098, 0.101, 0.104,
     0.107, 0.109, 0.108],
    [0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088,
     0.088, 0.088, 0.088]]

Z_walking = [
    [0.317, 0.307, 0.305, 0.305, 0.305, 0.304, 0.303, 0.301, 0.299, 0.296, 0.282, 0.276, 0.279, 0.285, 0.288, 0.290,
     0.303, 0.317, 0.317],
    [0.314, 0.305, 0.304, 0.304, 0.303, 0.301, 0.299, 0.296, 0.293, 0.290, 0.277, 0.272, 0.273, 0.280, 0.282, 0.285,
     0.297, 0.312, 0.313],
    [0.305, 0.295, 0.296, 0.295, 0.292, 0.289, 0.286, 0.284, 0.282, 0.278, 0.265, 0.261, 0.263, 0.268, 0.270, 0.273,
     0.285, 0.299, 0.301],
    [0.286, 0.276, 0.280, 0.277, 0.275, 0.270, 0.267, 0.265, 0.265, 0.261, 0.249, 0.245, 0.249, 0.251, 0.252, 0.254,
     0.266, 0.279, 0.281],
    [0.261, 0.251, 0.255, 0.253, 0.249, 0.245, 0.241, 0.240, 0.241, 0.238, 0.225, 0.225, 0.229, 0.229, 0.227, 0.231,
     0.242, 0.251, 0.255],
    [0.231, 0.221, 0.220, 0.222, 0.218, 0.214, 0.211, 0.210, 0.208, 0.204, 0.198, 0.203, 0.204, 0.204, 0.201, 0.202,
     0.209, 0.218, 0.221],
    [0.194, 0.188, 0.182, 0.183, 0.184, 0.181, 0.177, 0.174, 0.173, 0.172, 0.173, 0.176, 0.177, 0.176, 0.174, 0.173,
     0.174, 0.179, 0.182],
    [0.153, 0.151, 0.148, 0.147, 0.148, 0.148, 0.146, 0.143, 0.141, 0.142, 0.145, 0.146, 0.146, 0.145, 0.144, 0.142,
     0.139, 0.144, 0.149],
    [0.124, 0.124, 0.123, 0.123, 0.123, 0.123, 0.124, 0.125, 0.126, 0.126, 0.126, 0.125, 0.124, 0.124, 0.123, 0.123,
     0.122, 0.121, 0.121],
    [0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117,
     0.117, 0.117, 0.117]]

merge_siting = interp2d(x_lims, y_lims, Z_siting, kind='linear')
merge_standing = interp2d(x_lims, y_lims, Z_standing, kind='linear')
merge_walking = interp2d(x_lims, y_lims, Z_walking, kind='linear')

def paf(azimuth_solar, zenith_solar, position):
    assert 0 <= azimuth_solar <= 360, '太阳方位角应该在0~360之间'
    assert 0 <= zenith_solar <= 90, '太阳天顶角应该在0~90之间'
    assert position == 'siting' or position == 'standing' or position == 'walking', '请输入正确的人体姿势: "siting" or "standing" or "walking" '
    if 0 <= azimuth_solar <= 180:
        if position == 'siting':
            factor = merge_siting(azimuth_solar, zenith_solar)
        elif position == 'standing':
            factor = merge_standing(azimuth_solar, zenith_solar)
        elif position == 'standing':
            factor = merge_walking(azimuth_solar, zenith_solar)
    else:
        if position == 'siting':
            factor = merge_siting(180 - (azimuth_solar - 180), zenith_solar)
        elif position == 'standing':
            factor = merge_standing(180 - (azimuth_solar - 180), zenith_solar)
        elif position == 'standing':
            factor = merge_walking(180 - (azimuth_solar - 180), zenith_solar)
    return factor

if __name__ == '__main__':
    a = paf(190, 90, 'siting')
    print(a)
